// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2018 22:50:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Semaforo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Semaforo_vlg_sample_tst(
	A,
	B,
	C,
	clk,
	sensor1,
	sensor2,
	sampler_tx
);
input  A;
input  B;
input  C;
input  clk;
input  sensor1;
input  sensor2;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or clk or sensor1 or sensor2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Semaforo_vlg_check_tst (
	g,
	r,
	Va,
	Vn,
	y,
	sampler_rx
);
input [1:0] g;
input [1:0] r;
input  Va;
input  Vn;
input [1:0] y;
input sampler_rx;

reg [1:0] g_expected;
reg [1:0] r_expected;
reg  Va_expected;
reg  Vn_expected;
reg [1:0] y_expected;

reg [1:0] g_prev;
reg [1:0] r_prev;
reg  Va_prev;
reg  Vn_prev;
reg [1:0] y_prev;

reg [1:0] g_expected_prev;
reg [1:0] r_expected_prev;
reg  Va_expected_prev;
reg  Vn_expected_prev;
reg [1:0] y_expected_prev;

reg [1:0] last_g_exp;
reg [1:0] last_r_exp;
reg  last_Va_exp;
reg  last_Vn_exp;
reg [1:0] last_y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	g_prev = g;
	r_prev = r;
	Va_prev = Va;
	Vn_prev = Vn;
	y_prev = y;
end

// update expected /o prevs

always @(trigger)
begin
	g_expected_prev = g_expected;
	r_expected_prev = r_expected;
	Va_expected_prev = Va_expected;
	Vn_expected_prev = Vn_expected;
	y_expected_prev = y_expected;
end


// expected g[ 1 ]
initial
begin
	g_expected[1] = 1'bX;
end 
// expected g[ 0 ]
initial
begin
	g_expected[0] = 1'bX;
end 
// expected r[ 1 ]
initial
begin
	r_expected[1] = 1'bX;
end 
// expected r[ 0 ]
initial
begin
	r_expected[0] = 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
end 

// expected Va
initial
begin
	Va_expected = 1'bX;
end 

// expected Vn
initial
begin
	Vn_expected = 1'bX;
end 
// generate trigger
always @(g_expected or g or r_expected or r or Va_expected or Va or Vn_expected or Vn or y_expected or y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected g = %b | expected r = %b | expected Va = %b | expected Vn = %b | expected y = %b | ",g_expected_prev,r_expected_prev,Va_expected_prev,Vn_expected_prev,y_expected_prev);
	$display("| real g = %b | real r = %b | real Va = %b | real Vn = %b | real y = %b | ",g_prev,r_prev,Va_prev,Vn_prev,y_prev);
`endif
	if (
		( g_expected_prev[0] !== 1'bx ) && ( g_prev[0] !== g_expected_prev[0] )
		&& ((g_expected_prev[0] !== last_g_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_g_exp[0] = g_expected_prev[0];
	end
	if (
		( g_expected_prev[1] !== 1'bx ) && ( g_prev[1] !== g_expected_prev[1] )
		&& ((g_expected_prev[1] !== last_g_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_g_exp[1] = g_expected_prev[1];
	end
	if (
		( r_expected_prev[0] !== 1'bx ) && ( r_prev[0] !== r_expected_prev[0] )
		&& ((r_expected_prev[0] !== last_r_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_expected_prev);
		$display ("     Real value = %b", r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_exp[0] = r_expected_prev[0];
	end
	if (
		( r_expected_prev[1] !== 1'bx ) && ( r_prev[1] !== r_expected_prev[1] )
		&& ((r_expected_prev[1] !== last_r_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_expected_prev);
		$display ("     Real value = %b", r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r_exp[1] = r_expected_prev[1];
	end
	if (
		( Va_expected_prev !== 1'bx ) && ( Va_prev !== Va_expected_prev )
		&& ((Va_expected_prev !== last_Va_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Va :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Va_expected_prev);
		$display ("     Real value = %b", Va_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Va_exp = Va_expected_prev;
	end
	if (
		( Vn_expected_prev !== 1'bx ) && ( Vn_prev !== Vn_expected_prev )
		&& ((Vn_expected_prev !== last_Vn_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Vn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Vn_expected_prev);
		$display ("     Real value = %b", Vn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Vn_exp = Vn_expected_prev;
	end
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Semaforo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg clk;
reg sensor1;
reg sensor2;
// wires                                               
wire [1:0] g;
wire [1:0] r;
wire Va;
wire Vn;
wire [1:0] y;

wire sampler;                             

// assign statements (if any)                          
Semaforo i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.clk(clk),
	.g(g),
	.r(r),
	.sensor1(sensor1),
	.sensor2(sensor2),
	.Va(Va),
	.Vn(Vn),
	.y(y)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// A
initial
begin
	A = 1'b1;
end 

// B
initial
begin
	B = 1'b0;
end 

// C
initial
begin
	C = 1'b0;
end 

// sensor1
initial
begin
	sensor1 = 1'b0;
	sensor1 = #80000 1'b1;
	sensor1 = #260000 1'b0;
	sensor1 = #150000 1'b1;
	sensor1 = #60000 1'b0;
	sensor1 = #180000 1'b1;
	sensor1 = #120000 1'b0;
end 

// sensor2
initial
begin
	sensor2 = 1'b0;
	sensor2 = #140000 1'b1;
	sensor2 = #210000 1'b0;
end 

Semaforo_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.clk(clk),
	.sensor1(sensor1),
	.sensor2(sensor2),
	.sampler_tx(sampler)
);

Semaforo_vlg_check_tst tb_out(
	.g(g),
	.r(r),
	.Va(Va),
	.Vn(Vn),
	.y(y),
	.sampler_rx(sampler)
);
endmodule

